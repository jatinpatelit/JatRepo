Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be â‰¥ k.
The given num does not contain any leading zero.
Example 1:

Input: num = "1432219", k = 3
Output: "1219"
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.
Example 2:

Input: num = "10200", k = 1
Output: "200"
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.
Example 3:

Input: num = "10", k = 2
Output: "0"
Explanation: Remove all the digits from the number and it is left with nothing which is 0.



/**
 * @param {string} num
 * @param {number} k
 * @return {string}
 */
var removeKdigits = function(num, k) {
    if(!num || num.length === 0 || k === 0) {
        return num;
    }
    if(num.length === k) {
        return "0";
    }
    let result = [];
    let numArr = num.split('');
    let i=0;
    while(i<numArr.length) {
        while(k>0 && result && result[result.length-1]>parseInt(numArr[i])) {
            result.pop();
            k--;
        }
        result.push(parseInt(numArr[i]));
        i++;
    }
    while(k>0) {
        result.pop();
        k--;
    }
    while(result.length > 0 && result[0] === 0) {
        result.shift();
    }
    return result.length > 0 ? result.join('') : "0";
};
