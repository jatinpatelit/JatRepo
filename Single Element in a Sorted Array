You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

 

Example 1:

Input: [1,1,2,3,3,4,4,8,8]
Output: 2
Example 2:

Input: [3,3,7,7,10,11,11]
Output: 10
 

Note: Your solution should run in O(log n) time and O(1) space.

//  ***** O(N) solution  *****

/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNonDuplicate = function(nums) {
    if(!nums || nums.length === 0) {
        return nums;
    }
    let ele = nums[0];
    for(let i=1; i<nums.length; i++) {
        ele ^= nums[i]; 
    }
    return ele;
};


//  ***** O(logN) solution  *****

/**
 * @param {number[]} nums
 * @return {number}
 */
var singleNonDuplicate = function(nums) {
    if(!nums || nums.length === 0) {
        return nums;
    }
    let lo = 0;
    let hi = nums.length-1;
    
    while(lo<hi) {
        const mid = lo + Math.floor((hi-lo)/2);
        if(nums[mid] === nums[mid^1]) { // if mid is even, compare with next #, else prev #
            lo = mid+1;
        } else {
            hi = mid;
        }
    }
    return nums[lo];
};
