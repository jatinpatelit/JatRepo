In a binary tree, the root node is at depth 0, and children of each depth k node are at depth k+1.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the root of a binary tree with unique values, and the values x and y of two different nodes in the tree.

Return true if and only if the nodes corresponding to the values x and y are cousins.

 

Example 1:


Input: root = [1,2,3,4], x = 4, y = 3
Output: false
Example 2:


Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true
Example 3:



Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false
 

Note:

The number of nodes in the tree will be between 2 and 100.
Each node has a unique integer value from 1 to 100.




/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @param {number} x
 * @param {number} y
 * @return {boolean}
 */
var isCousins = function(root, x, y) {
    if(!root || root.length === 0) {
        return false;
    }
    let q = [];
    q.push(root);
    
    while(q && q.length>0) {
        let foundX = false;
        let foundY = false;
        let len = q.length; 
        
        for(let i=0; i<len; i++) {
            let curr = q.shift();
            if(curr.val === x) foundX = true;
            if(curr.val === y) foundY = true;
            
            // if parent return false
            if(curr.left && curr.right) {
                if((curr.left.val === x && curr.right.val === y)
                   || (curr.left.val === y && curr.right.val === x)){
                    return false;
                }
            }
            
            if(curr.left) {
                q.push(curr.left);
            }
            if(curr.right) {
                q.push(curr.right);
            }
        }
        if(foundX && foundY) return true;
    }
    return false;
};
