There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0, and to take course 0 you should
             also have finished course 1. So it is impossible.
 

Constraints:

The input prerequisites is a graph represented by a list of edges, not adjacency matrices. Read more about how a graph is represented.
You may assume that there are no duplicate edges in the input prerequisites.
1 <= numCourses <= 10^5




/**
 * @param {number} numCourses
 * @param {number[][]} prerequisites
 * @return {boolean}
 */
var canFinish = function(numCourses, prerequisites) {
    const completed = new Set();
    const visited = new Set();
    
    // create graph
    const graph = new Array(numCourses).fill(null).map(row=>[]);
    for(let [u,v] of prerequisites) {
        graph[v].push(u); // u depends on v
    }
    
    // DFS
    for(let v=0; v<numCourses; v++) {
        if(!dfs(v)) {
            return false;
        }
    }
    return true;
    
    function dfs(v) {
        if(completed.has(v)) return true; 
        if(visited.has(v)) return false;
        
        visited.add(v);
        for(let nv of graph[v]){
            if(!dfs(nv)) {
                return false;
            }
        }
        visited.delete(v);
        completed.add(v);
        return true;
    }
};
