Given a string, sort it in decreasing order based on the frequency of characters.

Example 1:

Input:
"tree"

Output:
"eert"

Explanation:
'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input:
"cccaaa"

Output:
"cccaaa"

Explanation:
Both 'c' and 'a' appear three times, so "aaaccc" is also a valid answer.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input:
"Aabb"

Output:
"bbAa"

Explanation:
"bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.





/**
 * @param {string} s
 * @return {string}
 */
var frequencySort = function(s) {
    if(!s || s.length === 0) {
        return s;
    }
    let letter = new Array(256).fill(0);
    let max = 0;
    
    for (let i=0; i<s.length; i++) {
        letter[s.charCodeAt(i)]++;
        max = Math.max(max, letter[s.charCodeAt(i)]);
    }
    
    let hash = new Array(max+1).fill('');    
    for (let i=0; i<256; i++) {
        const freq = letter[i];
        for(let j=0; j<freq; j++) {
            hash[max-freq] += String.fromCharCode(i);
        }
    }
    return hash.join('');
};
