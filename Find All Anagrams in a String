Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".




/**
 * @param {string} s
 * @param {string} p
 * @return {number[]}
 */
var findAnagrams = function(s, p) {
    let result = [];
    if(!p || !s || p.length === 0 || s.length === 0 || p.length > s.length) {
        return result;
    }
    let map = new Map();
    const pArr = p.split('');
    
    for(let i=0; i<pArr.length; i++) {
        let tmp = 0;
        let c = pArr[i];
        if(map.has(c)) {
            tmp = map.get(c);
        }
        map.set(c, tmp+1);
    }
    
    let count = map.size;
    let begin = 0, end = 0;    
    const sArr = s.split('');
    
    while(end < s.length) {
        let c = sArr[end];   // end
        if(map.has(c)) {
            let tmp = map.get(c);
            map.set(c, tmp-1);
            if(map.get(c) === 0) {
                count--;
            } 
        }
        end++;
        
        while(count === 0) {
            c = sArr[begin];   // begin
            if(map.has(c)) {
                tmp = map.get(c);
                map.set(c, tmp+1);
                if(map.get(c) > 0) {
                    count++;
                } 
            }
            if(end-begin === p.length){
                result.push(begin);
            }
            begin++;
        }
    }
    return result;    
};
