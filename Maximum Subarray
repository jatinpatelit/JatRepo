Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.


/**
 * @param {number[]} nums
 * @return {number}
 */
var maxSubArray = function(nums) {
    if(nums === null || nums.length === 0) {
        return 0;
    }
    
    let currSum = 0;
    let max = 0; 
    let negMax = Number.MIN_SAFE_INTEGER;
    let allNeg = true;
    
    for(let i=0; i<nums.length; i++) {
        if(allNeg && nums[i]>= 0) {
            allNeg = false;
        }
        if(allNeg && nums[i] <= 0 && negMax <= nums[i]) {
            negMax = nums[i];
        }        
        currSum += nums[i];
        if(currSum < 0) {
            currSum = 0;
        }
        if(max < currSum) {
            max = currSum;
        }
    }
    return allNeg ? negMax : max;
};
