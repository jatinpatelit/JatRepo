Return the root node of a binary search tree that matches the given preorder traversal.

(Recall that a binary search tree is a binary tree where for every node, any descendant of node.left has a value < node.val, and any descendant of node.right has a value > node.val.  Also recall that a preorder traversal displays the value of the node first, then traverses node.left, then traverses node.right.)

It's guaranteed that for the given test cases there is always possible to find a binary search tree with the given requirements.

Example 1:

Input: [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Constraints:

1 <= preorder.length <= 100
1 <= preorder[i] <= 10^8
The values of preorder are distinct.


/**
 * Definition for a binary tree node.
 * function TreeNode(val) {
 *     this.val = val;
 *     this.left = this.right = null;
 * }
 */
/**
 * @param {number[]} preorder
 * @return {TreeNode}
 */
var bstFromPreorder = function(preorder) {
    if(preorder === null || preorder.length === 0) {
        return null;
    }
    let root = new TreeNode(preorder[0]);
    for(let i=1; i<preorder.length; i++) {
        constructBST(root, preorder[i]);
    }
    return root;
};

var constructBST = function(root, ele) {
    if(ele < root.val) {
        if(root.left === null) {
            root.left = new TreeNode(ele);
            return;
        } else {
            constructBST(root.left, ele);
        }
    } else if(ele > root.val) {
        if(root.right === null) {
            root.right = new TreeNode(ele);
            return;
        } else {
            constructBST(root.right, ele);
        }
    }
}
